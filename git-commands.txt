   1 git init                         //basic command to initilize the empty git vcs repositry
   2 git add testing.py
   3 git status
   4 git add testing1.py            // to change the status of file from untracked to stage
   5 git rm --cached                //to get back from stage to untracked status
   6 git rm --cached testing.py
   7 git status
   8 git add .                           // change the status of all files
   9 git commit -m "agged testing files"  //from stage to tracked files     
  10 git restore testing.py                   //restore the deleted stuff  
  11 git status
  12  clear
  13 rm testimg.py
  14   history
  15   git remote add origin (url of that repository)          // add repository
  16   git remote -v            // to check that repository is added or not
     //if you create repository on github then branch name is main
    // but if you create repository on local then its name is master 

  17   git push origin master        //if  this error occur error: src refspec master does not match any
error: failed to push some refs to  it mean you have to create  classis token on github nd copy url

18   git remote set-url origin https://(url-token@url of thr github repository)
19   git remote -v              //to chek is it correct
20   git push origin master    //will be pushed after token createdgit 




21 git remote set-url origin https://github.com/Ranokhan0256/github-for-devops-workshop.git

//Create an initial commit 
22 echo "# DevOps Workshop Repo" > README.md
   git add README.md
   git commit -m "Initial commit"

//Rename the branch to main
23 git branch -M main

//Push to GitHub
24 git push -u origin main

//Set up your Git identity
25 git config --global user.name "Kashmala Khan"
   git config --global user.email "kashmalakhan5812.com"

//Option 2: Set it only for this repository
26  git config user.name "Kashmala Khan"
    git config user.email "youremail@example.com"

//After setting your identity
27 git commit -m "Initial commit"

//Then push to GitHub
28  git push -u origin main

github repo= 1)fork(ek repo se apni repo m copy krna ye hota h githyb to github)          
           2)clone(as it is copy) github to local



CLONE THE REPOSITORY FROM GITHUB TO LOCAL(GIT)

29  cd (folder name)
30  mkdir (folder name)
31  cd (folder name)
32  ls
33  git clone https://github.com/Ranokhan0256/github-for-devops-workshop.git(URL of cole mean go to code keyword)
34  ls
35  cd github-for-devops-workshop (us folder k andr chly jygy)
36  ls
37  

COPY GITHUB TO GITHUB
FROM GITHUB TO LOCAL
PUSH CODE FROM LOCAL TO GITHUB



PUSHING CHANGES FROM LOCAL(GIT) TO GITHUB
firstly your all files should be stages then you can commit CHANGES
37  git status
38  git add into.py(filemae)
39  git commit -m "Updated README, into.py, and testing.py"
40  git push origin main
        CHANGES EASILY pushed


hey guys imhere FROM GIT
HELLO GUYS FROM GITHUB


FROM GITHUB TO LOCAL
made changes means commit on github and save then run command
41  git pull



BRANCHES
Main and master

master/main k andar kuch files hhen jin me se ek new branch nikali hhen dev ur phr us dev branch k andr ek ur file daldi
master/main apni copied khud maintain krty hhen
master /main ko nahi pta deb me chal raha hhen
14 git branch                                //to see in which  branch we are
15 git branch new-branch-named-dev           //created new branch 
16 git switch new-branch-named-devn        //switch from main/master branch to new branch
17 git status                             //check status on which branch you are
18 git add this-is-from-dev.txt           //firslt create a file of this name then add that file
19 git commit -m "added dev file"         //commit changes
20 git push origin new-branch-named-dev   //puch changes to github
21 git status                            //check  on branch you are
22 git switch main                      //switch to branch main from dev
23 ls                                   //list files of main branch it will not show the file which is in dev branch

HEAD is the latest comit (apky branch ka latest comit )
24 git log --oneline                   //used to  the when changes occur
25 git checkout new-branch-named-dev   //also used to switch branch

PULL REQUEST is the way of merging two BRANCHES 
create pull req and merge main with new-branch-named-dev then the files of new-branch-named-dev will be in main branch
the pull that to local too
26 git switch main
27 git pull origin main
28 git fetch          //used to tranfer remote branch from github to local
29 


HOOKS:

1 ls -force                  //list all the files including hidden also have git folder with others
2 cd .git                    //go to git folder
3 ls                         //list all the files from git folder also have hooks folder with others
4 cd hooks                   //go to the hooks folder
5 ls                         //list all the files from hooks folder
6 vim pre-commit             // create afile vim   
go to setting write user.exclude and go to files exclude nad then click files on the sidebar then list show
from that list remove .git then you will see  the .git folder
7 cd..
8 cd..
pre-commit file should'nt empty
9 cd .git/hooks
10  Set-Content -NoNewline -Encoding ascii pre-commit "#!/bin/sh`nexit 0`n"
11 Get-Content .\pre-commit
it will showw like thhat:
#!/bin/sh
exit 0

create a file demo.py
12 git status
13 git add demo.py
14 git commit -m "addded code"
15 pip install flake8         //flake8 se ap apny code ki quality ko taste kr lety hho
17 flake8 demo.py     //this have path issue path in installed so use another one next to it
17 python -m flake8 demo.py       //shows error that are in demo.py file have







